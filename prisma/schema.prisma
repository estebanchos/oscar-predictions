// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  order     Int       @default(0)
  nominees  Nominee[]
  votes     Vote[]
  winnerId  String?
  winner    Nominee?  @relation("CategoryWinner", fields: [winnerId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Nominee {
  id         String     @id @default(cuid())
  name       String
  imageUrl   String?
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  votes      Vote[]
  wonFor     Category[] @relation("CategoryWinner")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([name, categoryId])
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  nomineeId  String
  nominee    Nominee  @relation(fields: [nomineeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, categoryId])
}